- name: Criando Security Group
  local_action:
    module: ec2_group
    name: "{{ security_name }}"
    description: estudando ansible
    region: "{{ region }}"
    # LIBERANDOS SSH
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0
      rule_desc: SSH

    # INICIO PORTAS DO K8S  
    - proto: tcp
      from_port: 2379
      to_port: 2380
      cidr_ip: 0.0.0.0/0
      rule_desc: etcd server API
    - proto: tcp
      from_port: 6443
      to_port: 6443
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-apiserver
    - proto: tcp
      from_port: 10250
      to_port: 10250
      cidr_ip: 0.0.0.0/0
      rule_desc: Kubelet API
    - proto: tcp
      from_port: 10251
      to_port: 10251
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-scheduler
    - proto: tcp
      from_port: 10252
      to_port: 10252
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-controller-manager
    - proto: tcp
      from_port: 10255
      to_port: 10255
      cidr_ip: 0.0.0.0/0
      rule_desc: Kubelet API Read-only
    - proto: tcp
      from_port: 30000
      to_port: 32767
      cidr_ip: 0.0.0.0/0
      rule_desc: NodePort Services
    - proto: tcp
      from_port: 6783
      to_port: 6783
      cidr_ip: 0.0.0.0/0
      rule_desc: WeaveNet
    - proto: udp
      from_port: 6783
      to_port: 6783
      cidr_ip: 0.0.0.0/0
      rule_desc: Weavenet
    - proto: udp
      from_port: 6784
      to_port: 6784
      cidr_ip: 0.0.0.0/0
      rule_desc: Weavenet  
    # FIM PORTAS DO K8S
    # LIBERANDO SAIDA PARA INTERNET
    rules_egress:
    - proto: all
      cidr_ip: 0.0.0.0/0
  register: basic_firewall    

# PARA QUE AS MÁQUINAS FIQUEM DISPONÍVEIS COM A CHAVE PUBLICA
- name: Importando a keypair
  ec2_key:
    name: "{{ key_name }}"
    region: "{{ region }}"
    key_material: "{{ item }}"
  with_file: "{{ keypair }}"

#FAZER USO DA CHAVE PUBLICA DO STEP ANTERIOR COM A key_name
- name: Criando Instancia EC2
  local_action: ec2
    group={{ security_name }}
    instance_type={{ instance_type }}
    image={{ image }}
    wait=true
    region={{ region }}
    key_name={{ key_name }}
    count={{ count }}
  register: ec2

- name: Adicionando instancia ao inventario temp
  add_host: name={{ item.public_ip  }} groups=security_name
  with_items: "{{ ec2.instances }}"

- name: Adicionando IP publico da instancia criada no arquivo hosts
  local_action: lineinfile
    dest="./hosts"
    regexp={{ item.public_ip }}
    insertafter="[kubernetes]" line={{ item.public_ip }}
  with_items: "{{ ec2.instances }}"  

- name: Adicionando IP privado da instancia criada no arquivo hosts
  local_action: lineinfile
    dest="./hosts"
    regexp={{ item.private_ip }} 
    insertafter="[kubernetes]" line={{ item.private_ip }}
  with_items: "{{ ec2.instances }}"

- name: Esperando SSH
  local_action: wait_for
    host={{ item.public_ip }}
    port=22
    state=started
  with_items: "{{ ec2.instances }}"

# DANDO NOMES AS MAQUINAS
- name: Adicionando tag a instancia
  local_action: ec2_tag resource={{ item.id }} region={{ region }} profile= {{ profile }} state=present
  with_items: "{{ ec2.instances }}"
  args:
    tags:
      Name: ansible-{{ item.ami_launch_index|int + 1 }}          
